package halfAdder;

public class HalfAdder {

    /**
     * This method returns a string diagram of half adder with both inputs and outputs.
     * @param firstBit  First bit to be added using half adder.
     * @param secondBit Second bit to be added using half adder.
     * @return String of half adder diagram.
     */
    public static String getHalfAdderDiagram(int firstBit, int secondBit){
        StringBuilder halfAdderDiagram = new StringBuilder();
        halfAdderDiagram.append(" ".repeat(10) + "-".repeat(20) + "\n");
        halfAdderDiagram.append(" ".repeat(10) + "|" + " ".repeat(18) + "|" + "\n");
        halfAdderDiagram.append(firstBit + "-".repeat(8) + ">" + "|" + " ".repeat(18) + "|"  + "-".repeat(8) + ">" + "SUM : " + getSum(firstBit, secondBit)+"\n");
        halfAdderDiagram.append(" ".repeat(10) + "|" + "    " + "HALF ADDER" + "    "  + "|" + "\n");
        halfAdderDiagram.append(secondBit + "-".repeat(8) + ">" + "|" + " ".repeat(18) + "|" + "-".repeat(8) + ">" + "CARRY : " + getCarry(firstBit,secondBit) +"\n");
        halfAdderDiagram.append(" ".repeat(10) + "|" + " ".repeat(18) + "|" + "\n");
        halfAdderDiagram.append(" ".repeat(10) + "-".repeat(20) + "\n");
        return halfAdderDiagram.toString();
    }

    /**
     * This method returns the sum value generated by the half adder.
     * @param firstBit First bit to be added using half adder.
     * @param secondBit Second bit to be added using half adder.
     * @return Integer value of sum.
     */
    public static int getSum(int firstBit, int secondBit) {
        int inverseOfFirstBit = (firstBit == 0) ? 1 :  0;
        int inverseOfSecondBit = (secondBit == 0) ? 1 : 0;
        return firstBit * inverseOfSecondBit + secondBit * inverseOfFirstBit;
    }

    /**
     * This method returns the sum value generated by the half adder.
     * @param firstBit First bit to be added using half adder.
     * @param secondBit Second bit to be added using half adder.
     * @return Integer value of carry.
     */
    public static int getCarry(int firstBit, int secondBit) {
        return firstBit * secondBit;
    }

    /**
     * This method returns the result string generated by the half adder.
     * @param firstBit First bit to be added using half adder.
     * @param secondBit Second bit to be added using half adder.
     * @return String containing result.
     */
    public static String sumOfTwoBits(int firstBit, int secondBit){
        return getCarry(firstBit, secondBit) + "" + getSum(firstBit, secondBit);
    }

    /**
     * This method prints the formatted result of the half adder .
     * @param firstBit First bit to be added using half adder.
     * @param secondBit Second bit to be added using half adder.
     */
    public static void printAddResult(int firstBit, int secondBit){
        System.out.println("SUM (A XOR B) = " + HalfAdder.getSum(firstBit, secondBit));
        System.out.println("CARRY (A AND B) = " + HalfAdder.getCarry(firstBit, secondBit));
        System.out.println("RESULT : " + HalfAdder.sumOfTwoBits(firstBit, secondBit));
        System.out.println(HalfAdder.getHalfAdderDiagram(firstBit, secondBit));
    }

    /**
     * This method prints the truth table for all possible binary inputs.
     */
    public static void printHalfAdderTruthTable(){
        int[] inputA = {0, 1};
        int[] inputB = {0, 1};
        System.out.println("|__A__|__B__|__SUM__|_CARRY_|");
        for (int i : inputA) {
            for (int j : inputB) {
                System.out.printf("|  %d  |  %d  |   %d   |   %d   |\n", i, j, getSum(i, j), getCarry(i, j));
            }
        }
        System.out.println();
    }
}
